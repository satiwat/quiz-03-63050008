{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport { getMonthsInYear } from '../../utils/date-utils';\nexport const getDateSectionConfigFromFormatToken = (utils, formatToken) => {\n  const config = utils.formatTokenMap[formatToken];\n  if (config == null) {\n    throw new Error([`MUI: The token \"${formatToken}\" is not supported by the Date and Time Pickers.`, 'Please try using another token or open an issue on https://github.com/mui/mui-x/issues/new/choose if you think it should be supported.'].join('\\n'));\n  }\n  if (typeof config === 'string') {\n    return {\n      type: config,\n      contentType: config === 'meridiem' ? 'letter' : 'digit',\n      maxLength: undefined\n    };\n  }\n  return {\n    type: config.sectionType,\n    contentType: config.contentType,\n    maxLength: config.maxLength\n  };\n};\nconst getDeltaFromKeyCode = keyCode => {\n  switch (keyCode) {\n    case 'ArrowUp':\n      return 1;\n    case 'ArrowDown':\n      return -1;\n    case 'PageUp':\n      return 5;\n    case 'PageDown':\n      return -5;\n    default:\n      return 0;\n  }\n};\nexport const getDaysInWeekStr = (utils, timezone, format) => {\n  const elements = [];\n  const now = utils.dateWithTimezone(undefined, timezone);\n  const startDate = utils.startOfWeek(now);\n  const endDate = utils.endOfWeek(now);\n  let current = startDate;\n  while (utils.isBefore(current, endDate)) {\n    elements.push(current);\n    current = utils.addDays(current, 1);\n  }\n  return elements.map(weekDay => utils.formatByString(weekDay, format));\n};\nexport const getLetterEditingOptions = (utils, timezone, sectionType, format) => {\n  switch (sectionType) {\n    case 'month':\n      {\n        return getMonthsInYear(utils, utils.dateWithTimezone(undefined, timezone)).map(month => utils.formatByString(month, format));\n      }\n    case 'weekDay':\n      {\n        return getDaysInWeekStr(utils, timezone, format);\n      }\n    case 'meridiem':\n      {\n        const now = utils.dateWithTimezone(undefined, timezone);\n        return [utils.startOfDay(now), utils.endOfDay(now)].map(date => utils.formatByString(date, format));\n      }\n    default:\n      {\n        return [];\n      }\n  }\n};\nexport const cleanLeadingZeros = (utils, valueStr, size) => {\n  let cleanValueStr = valueStr;\n\n  // Remove the leading zeros\n  cleanValueStr = Number(cleanValueStr).toString();\n\n  // Add enough leading zeros to fill the section\n  while (cleanValueStr.length < size) {\n    cleanValueStr = `0${cleanValueStr}`;\n  }\n  return cleanValueStr;\n};\nexport const cleanDigitSectionValue = (utils, timezone, value, sectionBoundaries, section) => {\n  if (process.env.NODE_ENV !== 'production') {\n    if (section.type !== 'day' && section.contentType === 'digit-with-letter') {\n      throw new Error([`MUI: The token \"${section.format}\" is a digit format with letter in it.'\n             This type of format is only supported for 'day' sections`].join('\\n'));\n    }\n  }\n  if (section.type === 'day' && section.contentType === 'digit-with-letter') {\n    const date = utils.setDate(sectionBoundaries.longestMonth, value);\n    return utils.formatByString(date, section.format);\n  }\n\n  // queryValue without leading `0` (`01` => `1`)\n  const valueStr = value.toString();\n  if (section.hasLeadingZerosInInput) {\n    return cleanLeadingZeros(utils, valueStr, section.maxLength);\n  }\n  return valueStr;\n};\nexport const adjustSectionValue = (utils, timezone, section, keyCode, sectionsValueBoundaries, activeDate, stepsAttributes) => {\n  const delta = getDeltaFromKeyCode(keyCode);\n  const isStart = keyCode === 'Home';\n  const isEnd = keyCode === 'End';\n  const shouldSetAbsolute = section.value === '' || isStart || isEnd;\n  const adjustDigitSection = () => {\n    const sectionBoundaries = sectionsValueBoundaries[section.type]({\n      currentDate: activeDate,\n      format: section.format,\n      contentType: section.contentType\n    });\n    const getCleanValue = value => cleanDigitSectionValue(utils, timezone, value, sectionBoundaries, section);\n    const step = section.type === 'minutes' && stepsAttributes != null && stepsAttributes.minutesStep ? stepsAttributes.minutesStep : 1;\n    const currentSectionValue = parseInt(section.value, 10);\n    let newSectionValueNumber = currentSectionValue + delta * step;\n    if (shouldSetAbsolute) {\n      if (section.type === 'year' && !isEnd && !isStart) {\n        return utils.formatByString(utils.dateWithTimezone(undefined, timezone), section.format);\n      }\n      if (delta > 0 || isStart) {\n        newSectionValueNumber = sectionBoundaries.minimum;\n      } else {\n        newSectionValueNumber = sectionBoundaries.maximum;\n      }\n    }\n    if (newSectionValueNumber % step !== 0) {\n      if (delta < 0 || isStart) {\n        newSectionValueNumber += step - (step + newSectionValueNumber) % step; // for JS -3 % 5 = -3 (should be 2)\n      }\n\n      if (delta > 0 || isEnd) {\n        newSectionValueNumber -= newSectionValueNumber % step;\n      }\n    }\n    if (newSectionValueNumber > sectionBoundaries.maximum) {\n      return getCleanValue(sectionBoundaries.minimum + (newSectionValueNumber - sectionBoundaries.maximum - 1) % (sectionBoundaries.maximum - sectionBoundaries.minimum + 1));\n    }\n    if (newSectionValueNumber < sectionBoundaries.minimum) {\n      return getCleanValue(sectionBoundaries.maximum - (sectionBoundaries.minimum - newSectionValueNumber - 1) % (sectionBoundaries.maximum - sectionBoundaries.minimum + 1));\n    }\n    return getCleanValue(newSectionValueNumber);\n  };\n  const adjustLetterSection = () => {\n    const options = getLetterEditingOptions(utils, timezone, section.type, section.format);\n    if (options.length === 0) {\n      return section.value;\n    }\n    if (shouldSetAbsolute) {\n      if (delta > 0 || isStart) {\n        return options[0];\n      }\n      return options[options.length - 1];\n    }\n    const currentOptionIndex = options.indexOf(section.value);\n    const newOptionIndex = (currentOptionIndex + options.length + delta) % options.length;\n    return options[newOptionIndex];\n  };\n  if (section.contentType === 'digit' || section.contentType === 'digit-with-letter') {\n    return adjustDigitSection();\n  }\n  return adjustLetterSection();\n};\nexport const getSectionVisibleValue = (section, target) => {\n  let value = section.value || section.placeholder;\n  const hasLeadingZeros = target === 'non-input' ? section.hasLeadingZerosInFormat : section.hasLeadingZerosInInput;\n  if (target === 'non-input' && section.hasLeadingZerosInInput && !section.hasLeadingZerosInFormat) {\n    value = Number(value).toString();\n  }\n\n  // In the input, we add an empty character at the end of each section without leading zeros.\n  // This makes sure that `onChange` will always be fired.\n  // Otherwise, when your input value equals `1/dd/yyyy` (format `M/DD/YYYY` on DayJs),\n  // If you press `1`, on the first section, the new value is also `1/dd/yyyy`,\n  // So the browser will not fire the input `onChange`.\n  const shouldAddInvisibleSpace = ['input-rtl', 'input-ltr'].includes(target) && section.contentType === 'digit' && !hasLeadingZeros && value.length === 1;\n  if (shouldAddInvisibleSpace) {\n    value = `${value}\\u200e`;\n  }\n  if (target === 'input-rtl') {\n    value = `\\u2068${value}\\u2069`;\n  }\n  return value;\n};\nexport const cleanString = dirtyString => dirtyString.replace(/[\\u2066\\u2067\\u2068\\u2069]/g, '');\nexport const addPositionPropertiesToSections = (sections, isRTL) => {\n  let position = 0;\n  let positionInInput = isRTL ? 1 : 0;\n  const newSections = [];\n  for (let i = 0; i < sections.length; i += 1) {\n    const section = sections[i];\n    const renderedValue = getSectionVisibleValue(section, isRTL ? 'input-rtl' : 'input-ltr');\n    const sectionStr = `${section.startSeparator}${renderedValue}${section.endSeparator}`;\n    const sectionLength = cleanString(sectionStr).length;\n    const sectionLengthInInput = sectionStr.length;\n\n    // The ...InInput values consider the unicode characters but do include them in their indexes\n    const cleanedValue = cleanString(renderedValue);\n    const startInInput = positionInInput + renderedValue.indexOf(cleanedValue[0]) + section.startSeparator.length;\n    const endInInput = startInInput + cleanedValue.length;\n    newSections.push(_extends({}, section, {\n      start: position,\n      end: position + sectionLength,\n      startInInput,\n      endInInput\n    }));\n    position += sectionLength;\n    // Move position to the end of string associated to the current section\n    positionInInput += sectionLengthInInput;\n  }\n  return newSections;\n};\nconst getSectionPlaceholder = (utils, timezone, localeText, sectionConfig, currentTokenValue) => {\n  switch (sectionConfig.type) {\n    case 'year':\n      {\n        return localeText.fieldYearPlaceholder({\n          digitAmount: utils.formatByString(utils.dateWithTimezone(undefined, timezone), currentTokenValue).length\n        });\n      }\n    case 'month':\n      {\n        return localeText.fieldMonthPlaceholder({\n          contentType: sectionConfig.contentType\n        });\n      }\n    case 'day':\n      {\n        return localeText.fieldDayPlaceholder();\n      }\n    case 'weekDay':\n      {\n        return localeText.fieldWeekDayPlaceholder({\n          contentType: sectionConfig.contentType\n        });\n      }\n    case 'hours':\n      {\n        return localeText.fieldHoursPlaceholder();\n      }\n    case 'minutes':\n      {\n        return localeText.fieldMinutesPlaceholder();\n      }\n    case 'seconds':\n      {\n        return localeText.fieldSecondsPlaceholder();\n      }\n    case 'meridiem':\n      {\n        return localeText.fieldMeridiemPlaceholder();\n      }\n    default:\n      {\n        return currentTokenValue;\n      }\n  }\n};\nexport const changeSectionValueFormat = (utils, valueStr, currentFormat, newFormat) => {\n  if (process.env.NODE_ENV !== 'production') {\n    if (getDateSectionConfigFromFormatToken(utils, currentFormat).type === 'weekDay') {\n      throw new Error(\"changeSectionValueFormat doesn't support week day formats\");\n    }\n  }\n  return utils.formatByString(utils.parse(valueStr, currentFormat), newFormat);\n};\nconst isFourDigitYearFormat = (utils, timezone, format) => utils.formatByString(utils.dateWithTimezone(undefined, timezone), format).length === 4;\nexport const doesSectionFormatHaveLeadingZeros = (utils, timezone, contentType, sectionType, format) => {\n  if (contentType !== 'digit') {\n    return false;\n  }\n  const now = utils.dateWithTimezone(undefined, timezone);\n  switch (sectionType) {\n    // We can't use `changeSectionValueFormat`, because  `utils.parse('1', 'YYYY')` returns `1971` instead of `1`.\n    case 'year':\n      {\n        if (isFourDigitYearFormat(utils, timezone, format)) {\n          const formatted0001 = utils.formatByString(utils.setYear(now, 1), format);\n          return formatted0001 === '0001';\n        }\n        const formatted2001 = utils.formatByString(utils.setYear(now, 2001), format);\n        return formatted2001 === '01';\n      }\n    case 'month':\n      {\n        return utils.formatByString(utils.startOfYear(now), format).length > 1;\n      }\n    case 'day':\n      {\n        return utils.formatByString(utils.startOfMonth(now), format).length > 1;\n      }\n    case 'weekDay':\n      {\n        return utils.formatByString(utils.startOfWeek(now), format).length > 1;\n      }\n    case 'hours':\n      {\n        return utils.formatByString(utils.setHours(now, 1), format).length > 1;\n      }\n    case 'minutes':\n      {\n        return utils.formatByString(utils.setMinutes(now, 1), format).length > 1;\n      }\n    case 'seconds':\n      {\n        return utils.formatByString(utils.setMinutes(now, 1), format).length > 1;\n      }\n    default:\n      {\n        throw new Error('Invalid section type');\n      }\n  }\n};\nconst getEscapedPartsFromFormat = (utils, format) => {\n  const escapedParts = [];\n  const {\n    start: startChar,\n    end: endChar\n  } = utils.escapedCharacters;\n  const regExp = new RegExp(`(\\\\${startChar}[^\\\\${endChar}]*\\\\${endChar})+`, 'g');\n  let match = null;\n  // eslint-disable-next-line no-cond-assign\n  while (match = regExp.exec(format)) {\n    escapedParts.push({\n      start: match.index,\n      end: regExp.lastIndex - 1\n    });\n  }\n  return escapedParts;\n};\nexport const splitFormatIntoSections = (utils, timezone, localeText, format, date, formatDensity, shouldRespectLeadingZeros, isRTL) => {\n  let startSeparator = '';\n  const sections = [];\n  const now = utils.date();\n  const commitToken = token => {\n    if (token === '') {\n      return null;\n    }\n    const sectionConfig = getDateSectionConfigFromFormatToken(utils, token);\n    const hasLeadingZerosInFormat = doesSectionFormatHaveLeadingZeros(utils, timezone, sectionConfig.contentType, sectionConfig.type, token);\n    const hasLeadingZerosInInput = shouldRespectLeadingZeros ? hasLeadingZerosInFormat : sectionConfig.contentType === 'digit';\n    const isValidDate = date != null && utils.isValid(date);\n    let sectionValue = isValidDate ? utils.formatByString(date, token) : '';\n    let maxLength = null;\n    if (hasLeadingZerosInInput) {\n      if (hasLeadingZerosInFormat) {\n        maxLength = sectionValue === '' ? utils.formatByString(now, token).length : sectionValue.length;\n      } else {\n        if (sectionConfig.maxLength == null) {\n          throw new Error(`MUI: The token ${token} should have a 'maxDigitNumber' property on it's adapter`);\n        }\n        maxLength = sectionConfig.maxLength;\n        if (isValidDate) {\n          sectionValue = cleanLeadingZeros(utils, sectionValue, maxLength);\n        }\n      }\n    }\n    sections.push(_extends({}, sectionConfig, {\n      format: token,\n      maxLength,\n      value: sectionValue,\n      placeholder: getSectionPlaceholder(utils, timezone, localeText, sectionConfig, token),\n      hasLeadingZeros: hasLeadingZerosInFormat,\n      hasLeadingZerosInFormat,\n      hasLeadingZerosInInput,\n      startSeparator: sections.length === 0 ? startSeparator : '',\n      endSeparator: '',\n      modified: false\n    }));\n    return null;\n  };\n\n  // Expand the provided format\n  let formatExpansionOverflow = 10;\n  let prevFormat = format;\n  let nextFormat = utils.expandFormat(format);\n  while (nextFormat !== prevFormat) {\n    prevFormat = nextFormat;\n    nextFormat = utils.expandFormat(prevFormat);\n    formatExpansionOverflow -= 1;\n    if (formatExpansionOverflow < 0) {\n      throw new Error('MUI: The format expansion seems to be  enter in an infinite loop. Please open an issue with the format passed to the picker component');\n    }\n  }\n  const expandedFormat = nextFormat;\n\n  // Get start/end indexes of escaped sections\n  const escapedParts = getEscapedPartsFromFormat(utils, expandedFormat);\n\n  // This RegExp test if the beginning of a string correspond to a supported token\n  const isTokenStartRegExp = new RegExp(`^(${Object.keys(utils.formatTokenMap).join('|')})`);\n  let currentTokenValue = '';\n  for (let i = 0; i < expandedFormat.length; i += 1) {\n    const escapedPartOfCurrentChar = escapedParts.find(escapeIndex => escapeIndex.start <= i && escapeIndex.end >= i);\n    const char = expandedFormat[i];\n    const isEscapedChar = escapedPartOfCurrentChar != null;\n    const potentialToken = `${currentTokenValue}${expandedFormat.slice(i)}`;\n    if (!isEscapedChar && char.match(/([A-Za-z]+)/) && isTokenStartRegExp.test(potentialToken)) {\n      currentTokenValue += char;\n    } else {\n      // If we are on the opening or closing character of an escaped part of the format,\n      // Then we ignore this character.\n      const isEscapeBoundary = isEscapedChar && (escapedPartOfCurrentChar == null ? void 0 : escapedPartOfCurrentChar.start) === i || (escapedPartOfCurrentChar == null ? void 0 : escapedPartOfCurrentChar.end) === i;\n      if (!isEscapeBoundary) {\n        commitToken(currentTokenValue);\n        currentTokenValue = '';\n        if (sections.length === 0) {\n          startSeparator += char;\n        } else {\n          sections[sections.length - 1].endSeparator += char;\n        }\n      }\n    }\n  }\n  commitToken(currentTokenValue);\n  return sections.map(section => {\n    const cleanSeparator = separator => {\n      let cleanedSeparator = separator;\n      if (isRTL && cleanedSeparator !== null && cleanedSeparator.includes(' ')) {\n        cleanedSeparator = `\\u2069${cleanedSeparator}\\u2066`;\n      }\n      if (formatDensity === 'spacious' && ['/', '.', '-'].includes(cleanedSeparator)) {\n        cleanedSeparator = ` ${cleanedSeparator} `;\n      }\n      return cleanedSeparator;\n    };\n    section.startSeparator = cleanSeparator(section.startSeparator);\n    section.endSeparator = cleanSeparator(section.endSeparator);\n    return section;\n  });\n};\n\n/**\n * Some date libraries like `dayjs` don't support parsing from date with escaped characters.\n * To make sure that the parsing works, we are building a format and a date without any separator.\n */\nexport const getDateFromDateSections = (utils, sections) => {\n  // If we have both a day and a weekDay section,\n  // Then we skip the weekDay in the parsing because libraries like dayjs can't parse complicated formats containing a weekDay.\n  // dayjs(dayjs().format('dddd MMMM D YYYY'), 'dddd MMMM D YYYY')) // returns `Invalid Date` even if the format is valid.\n  const shouldSkipWeekDays = sections.some(section => section.type === 'day');\n  const sectionFormats = [];\n  const sectionValues = [];\n  for (let i = 0; i < sections.length; i += 1) {\n    const section = sections[i];\n    const shouldSkip = shouldSkipWeekDays && section.type === 'weekDay';\n    if (!shouldSkip) {\n      sectionFormats.push(section.format);\n      sectionValues.push(getSectionVisibleValue(section, 'non-input'));\n    }\n  }\n  const formatWithoutSeparator = sectionFormats.join(' ');\n  const dateWithoutSeparatorStr = sectionValues.join(' ');\n  return utils.parse(dateWithoutSeparatorStr, formatWithoutSeparator);\n};\nexport const createDateStrForInputFromSections = (sections, isRTL) => {\n  const formattedSections = sections.map(section => {\n    const dateValue = getSectionVisibleValue(section, isRTL ? 'input-rtl' : 'input-ltr');\n    return `${section.startSeparator}${dateValue}${section.endSeparator}`;\n  });\n  const dateStr = formattedSections.join('');\n  if (!isRTL) {\n    return dateStr;\n  }\n\n  // \\u2066: start left-to-right isolation\n  // \\u2067: start right-to-left isolation\n  // \\u2068: start first strong character isolation\n  // \\u2069: pop isolation\n  // wrap into an isolated group such that separators can split the string in smaller ones by adding \\u2069\\u2068\n  return `\\u2066${dateStr}\\u2069`;\n};\nexport const getSectionsBoundaries = (utils, timezone) => {\n  const today = utils.dateWithTimezone(undefined, timezone);\n  const endOfYear = utils.endOfYear(today);\n  const endOfDay = utils.endOfDay(today);\n  const {\n    maxDaysInMonth,\n    longestMonth\n  } = getMonthsInYear(utils, today).reduce((acc, month) => {\n    const daysInMonth = utils.getDaysInMonth(month);\n    if (daysInMonth > acc.maxDaysInMonth) {\n      return {\n        maxDaysInMonth: daysInMonth,\n        longestMonth: month\n      };\n    }\n    return acc;\n  }, {\n    maxDaysInMonth: 0,\n    longestMonth: null\n  });\n  return {\n    year: ({\n      format\n    }) => ({\n      minimum: 0,\n      maximum: isFourDigitYearFormat(utils, timezone, format) ? 9999 : 99\n    }),\n    month: () => ({\n      minimum: 1,\n      // Assumption: All years have the same amount of months\n      maximum: utils.getMonth(endOfYear) + 1\n    }),\n    day: ({\n      currentDate\n    }) => ({\n      minimum: 1,\n      maximum: currentDate != null && utils.isValid(currentDate) ? utils.getDaysInMonth(currentDate) : maxDaysInMonth,\n      longestMonth: longestMonth\n    }),\n    weekDay: ({\n      format,\n      contentType\n    }) => {\n      if (contentType === 'digit') {\n        const daysInWeek = getDaysInWeekStr(utils, timezone, format).map(Number);\n        return {\n          minimum: Math.min(...daysInWeek),\n          maximum: Math.max(...daysInWeek)\n        };\n      }\n      return {\n        minimum: 1,\n        maximum: 7\n      };\n    },\n    hours: ({\n      format\n    }) => {\n      const lastHourInDay = utils.getHours(endOfDay);\n      const hasMeridiem = utils.formatByString(utils.endOfDay(today), format) !== lastHourInDay.toString();\n      if (hasMeridiem) {\n        return {\n          minimum: 1,\n          maximum: Number(utils.formatByString(utils.startOfDay(today), format))\n        };\n      }\n      return {\n        minimum: 0,\n        maximum: lastHourInDay\n      };\n    },\n    minutes: () => ({\n      minimum: 0,\n      // Assumption: All years have the same amount of minutes\n      maximum: utils.getMinutes(endOfDay)\n    }),\n    seconds: () => ({\n      minimum: 0,\n      // Assumption: All years have the same amount of seconds\n      maximum: utils.getSeconds(endOfDay)\n    }),\n    meridiem: () => ({\n      minimum: 0,\n      maximum: 0\n    })\n  };\n};\nlet warnedOnceInvalidSection = false;\nexport const validateSections = (sections, valueType) => {\n  if (process.env.NODE_ENV !== 'production') {\n    if (!warnedOnceInvalidSection) {\n      const supportedSections = [];\n      if (['date', 'date-time'].includes(valueType)) {\n        supportedSections.push('weekDay', 'day', 'month', 'year');\n      }\n      if (['time', 'date-time'].includes(valueType)) {\n        supportedSections.push('hours', 'minutes', 'seconds', 'meridiem');\n      }\n      const invalidSection = sections.find(section => !supportedSections.includes(section.type));\n      if (invalidSection) {\n        console.warn(`MUI: The field component you are using is not compatible with the \"${invalidSection.type} date section.`, `The supported date sections are [\"${supportedSections.join('\", \"')}\"]\\`.`);\n        warnedOnceInvalidSection = true;\n      }\n    }\n  }\n};\nconst transferDateSectionValue = (utils, timezone, section, dateToTransferFrom, dateToTransferTo) => {\n  switch (section.type) {\n    case 'year':\n      {\n        return utils.setYear(dateToTransferTo, utils.getYear(dateToTransferFrom));\n      }\n    case 'month':\n      {\n        return utils.setMonth(dateToTransferTo, utils.getMonth(dateToTransferFrom));\n      }\n    case 'weekDay':\n      {\n        const formattedDaysInWeek = getDaysInWeekStr(utils, timezone, section.format);\n        const dayInWeekStrOfActiveDate = utils.formatByString(dateToTransferFrom, section.format);\n        const dayInWeekOfActiveDate = formattedDaysInWeek.indexOf(dayInWeekStrOfActiveDate);\n        const dayInWeekOfNewSectionValue = formattedDaysInWeek.indexOf(section.value);\n        const diff = dayInWeekOfNewSectionValue - dayInWeekOfActiveDate;\n        return utils.addDays(dateToTransferFrom, diff);\n      }\n    case 'day':\n      {\n        return utils.setDate(dateToTransferTo, utils.getDate(dateToTransferFrom));\n      }\n    case 'meridiem':\n      {\n        const isAM = utils.getHours(dateToTransferFrom) < 12;\n        const mergedDateHours = utils.getHours(dateToTransferTo);\n        if (isAM && mergedDateHours >= 12) {\n          return utils.addHours(dateToTransferTo, -12);\n        }\n        if (!isAM && mergedDateHours < 12) {\n          return utils.addHours(dateToTransferTo, 12);\n        }\n        return dateToTransferTo;\n      }\n    case 'hours':\n      {\n        return utils.setHours(dateToTransferTo, utils.getHours(dateToTransferFrom));\n      }\n    case 'minutes':\n      {\n        return utils.setMinutes(dateToTransferTo, utils.getMinutes(dateToTransferFrom));\n      }\n    case 'seconds':\n      {\n        return utils.setSeconds(dateToTransferTo, utils.getSeconds(dateToTransferFrom));\n      }\n    default:\n      {\n        return dateToTransferTo;\n      }\n  }\n};\nconst reliableSectionModificationOrder = {\n  year: 1,\n  month: 2,\n  day: 3,\n  weekDay: 4,\n  hours: 5,\n  minutes: 6,\n  seconds: 7,\n  meridiem: 8\n};\nexport const mergeDateIntoReferenceDate = (utils, timezone, dateToTransferFrom, sections, referenceDate, shouldLimitToEditedSections) =>\n// cloning sections before sort to avoid mutating it\n[...sections].sort((a, b) => reliableSectionModificationOrder[a.type] - reliableSectionModificationOrder[b.type]).reduce((mergedDate, section) => {\n  if (!shouldLimitToEditedSections || section.modified) {\n    return transferDateSectionValue(utils, timezone, section, dateToTransferFrom, mergedDate);\n  }\n  return mergedDate;\n}, referenceDate);\nexport const isAndroid = () => navigator.userAgent.toLowerCase().indexOf('android') > -1;\nexport const getSectionOrder = (sections, isRTL) => {\n  const neighbors = {};\n  if (!isRTL) {\n    sections.forEach((_, index) => {\n      const leftIndex = index === 0 ? null : index - 1;\n      const rightIndex = index === sections.length - 1 ? null : index + 1;\n      neighbors[index] = {\n        leftIndex,\n        rightIndex\n      };\n    });\n    return {\n      neighbors,\n      startIndex: 0,\n      endIndex: sections.length - 1\n    };\n  }\n  const rtl2ltr = {};\n  const ltr2rtl = {};\n  let groupedSectionsStart = 0;\n  let groupedSectionsEnd = 0;\n  let RTLIndex = sections.length - 1;\n  while (RTLIndex >= 0) {\n    groupedSectionsEnd = sections.findIndex(\n    // eslint-disable-next-line @typescript-eslint/no-loop-func\n    (section, index) => {\n      var _section$endSeparator;\n      return index >= groupedSectionsStart && ((_section$endSeparator = section.endSeparator) == null ? void 0 : _section$endSeparator.includes(' ')) &&\n      // Special case where the spaces were not there in the initial input\n      section.endSeparator !== ' / ';\n    });\n    if (groupedSectionsEnd === -1) {\n      groupedSectionsEnd = sections.length - 1;\n    }\n    for (let i = groupedSectionsEnd; i >= groupedSectionsStart; i -= 1) {\n      ltr2rtl[i] = RTLIndex;\n      rtl2ltr[RTLIndex] = i;\n      RTLIndex -= 1;\n    }\n    groupedSectionsStart = groupedSectionsEnd + 1;\n  }\n  sections.forEach((_, index) => {\n    const rtlIndex = ltr2rtl[index];\n    const leftIndex = rtlIndex === 0 ? null : rtl2ltr[rtlIndex - 1];\n    const rightIndex = rtlIndex === sections.length - 1 ? null : rtl2ltr[rtlIndex + 1];\n    neighbors[index] = {\n      leftIndex,\n      rightIndex\n    };\n  });\n  return {\n    neighbors,\n    startIndex: rtl2ltr[0],\n    endIndex: rtl2ltr[sections.length - 1]\n  };\n};","map":{"version":3,"names":["_extends","getMonthsInYear","getDateSectionConfigFromFormatToken","utils","formatToken","config","formatTokenMap","Error","join","type","contentType","maxLength","undefined","sectionType","getDeltaFromKeyCode","keyCode","getDaysInWeekStr","timezone","format","elements","now","dateWithTimezone","startDate","startOfWeek","endDate","endOfWeek","current","isBefore","push","addDays","map","weekDay","formatByString","getLetterEditingOptions","month","startOfDay","endOfDay","date","cleanLeadingZeros","valueStr","size","cleanValueStr","Number","toString","length","cleanDigitSectionValue","value","sectionBoundaries","section","process","env","NODE_ENV","setDate","longestMonth","hasLeadingZerosInInput","adjustSectionValue","sectionsValueBoundaries","activeDate","stepsAttributes","delta","isStart","isEnd","shouldSetAbsolute","adjustDigitSection","currentDate","getCleanValue","step","minutesStep","currentSectionValue","parseInt","newSectionValueNumber","minimum","maximum","adjustLetterSection","options","currentOptionIndex","indexOf","newOptionIndex","getSectionVisibleValue","target","placeholder","hasLeadingZeros","hasLeadingZerosInFormat","shouldAddInvisibleSpace","includes","cleanString","dirtyString","replace","addPositionPropertiesToSections","sections","isRTL","position","positionInInput","newSections","i","renderedValue","sectionStr","startSeparator","endSeparator","sectionLength","sectionLengthInInput","cleanedValue","startInInput","endInInput","start","end","getSectionPlaceholder","localeText","sectionConfig","currentTokenValue","fieldYearPlaceholder","digitAmount","fieldMonthPlaceholder","fieldDayPlaceholder","fieldWeekDayPlaceholder","fieldHoursPlaceholder","fieldMinutesPlaceholder","fieldSecondsPlaceholder","fieldMeridiemPlaceholder","changeSectionValueFormat","currentFormat","newFormat","parse","isFourDigitYearFormat","doesSectionFormatHaveLeadingZeros","formatted0001","setYear","formatted2001","startOfYear","startOfMonth","setHours","setMinutes","getEscapedPartsFromFormat","escapedParts","startChar","endChar","escapedCharacters","regExp","RegExp","match","exec","index","lastIndex","splitFormatIntoSections","formatDensity","shouldRespectLeadingZeros","commitToken","token","isValidDate","isValid","sectionValue","modified","formatExpansionOverflow","prevFormat","nextFormat","expandFormat","expandedFormat","isTokenStartRegExp","Object","keys","escapedPartOfCurrentChar","find","escapeIndex","char","isEscapedChar","potentialToken","slice","test","isEscapeBoundary","cleanSeparator","separator","cleanedSeparator","getDateFromDateSections","shouldSkipWeekDays","some","sectionFormats","sectionValues","shouldSkip","formatWithoutSeparator","dateWithoutSeparatorStr","createDateStrForInputFromSections","formattedSections","dateValue","dateStr","getSectionsBoundaries","today","endOfYear","maxDaysInMonth","reduce","acc","daysInMonth","getDaysInMonth","year","getMonth","day","daysInWeek","Math","min","max","hours","lastHourInDay","getHours","hasMeridiem","minutes","getMinutes","seconds","getSeconds","meridiem","warnedOnceInvalidSection","validateSections","valueType","supportedSections","invalidSection","console","warn","transferDateSectionValue","dateToTransferFrom","dateToTransferTo","getYear","setMonth","formattedDaysInWeek","dayInWeekStrOfActiveDate","dayInWeekOfActiveDate","dayInWeekOfNewSectionValue","diff","getDate","isAM","mergedDateHours","addHours","setSeconds","reliableSectionModificationOrder","mergeDateIntoReferenceDate","referenceDate","shouldLimitToEditedSections","sort","a","b","mergedDate","isAndroid","navigator","userAgent","toLowerCase","getSectionOrder","neighbors","forEach","_","leftIndex","rightIndex","startIndex","endIndex","rtl2ltr","ltr2rtl","groupedSectionsStart","groupedSectionsEnd","RTLIndex","findIndex","_section$endSeparator","rtlIndex"],"sources":["C:/Users/satiwat/Desktop/quiz 3/my-app/node_modules/@mui/x-date-pickers/internals/hooks/useField/useField.utils.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport { getMonthsInYear } from '../../utils/date-utils';\nexport const getDateSectionConfigFromFormatToken = (utils, formatToken) => {\n  const config = utils.formatTokenMap[formatToken];\n  if (config == null) {\n    throw new Error([`MUI: The token \"${formatToken}\" is not supported by the Date and Time Pickers.`, 'Please try using another token or open an issue on https://github.com/mui/mui-x/issues/new/choose if you think it should be supported.'].join('\\n'));\n  }\n  if (typeof config === 'string') {\n    return {\n      type: config,\n      contentType: config === 'meridiem' ? 'letter' : 'digit',\n      maxLength: undefined\n    };\n  }\n  return {\n    type: config.sectionType,\n    contentType: config.contentType,\n    maxLength: config.maxLength\n  };\n};\nconst getDeltaFromKeyCode = keyCode => {\n  switch (keyCode) {\n    case 'ArrowUp':\n      return 1;\n    case 'ArrowDown':\n      return -1;\n    case 'PageUp':\n      return 5;\n    case 'PageDown':\n      return -5;\n    default:\n      return 0;\n  }\n};\nexport const getDaysInWeekStr = (utils, timezone, format) => {\n  const elements = [];\n  const now = utils.dateWithTimezone(undefined, timezone);\n  const startDate = utils.startOfWeek(now);\n  const endDate = utils.endOfWeek(now);\n  let current = startDate;\n  while (utils.isBefore(current, endDate)) {\n    elements.push(current);\n    current = utils.addDays(current, 1);\n  }\n  return elements.map(weekDay => utils.formatByString(weekDay, format));\n};\nexport const getLetterEditingOptions = (utils, timezone, sectionType, format) => {\n  switch (sectionType) {\n    case 'month':\n      {\n        return getMonthsInYear(utils, utils.dateWithTimezone(undefined, timezone)).map(month => utils.formatByString(month, format));\n      }\n    case 'weekDay':\n      {\n        return getDaysInWeekStr(utils, timezone, format);\n      }\n    case 'meridiem':\n      {\n        const now = utils.dateWithTimezone(undefined, timezone);\n        return [utils.startOfDay(now), utils.endOfDay(now)].map(date => utils.formatByString(date, format));\n      }\n    default:\n      {\n        return [];\n      }\n  }\n};\nexport const cleanLeadingZeros = (utils, valueStr, size) => {\n  let cleanValueStr = valueStr;\n\n  // Remove the leading zeros\n  cleanValueStr = Number(cleanValueStr).toString();\n\n  // Add enough leading zeros to fill the section\n  while (cleanValueStr.length < size) {\n    cleanValueStr = `0${cleanValueStr}`;\n  }\n  return cleanValueStr;\n};\nexport const cleanDigitSectionValue = (utils, timezone, value, sectionBoundaries, section) => {\n  if (process.env.NODE_ENV !== 'production') {\n    if (section.type !== 'day' && section.contentType === 'digit-with-letter') {\n      throw new Error([`MUI: The token \"${section.format}\" is a digit format with letter in it.'\n             This type of format is only supported for 'day' sections`].join('\\n'));\n    }\n  }\n  if (section.type === 'day' && section.contentType === 'digit-with-letter') {\n    const date = utils.setDate(sectionBoundaries.longestMonth, value);\n    return utils.formatByString(date, section.format);\n  }\n\n  // queryValue without leading `0` (`01` => `1`)\n  const valueStr = value.toString();\n  if (section.hasLeadingZerosInInput) {\n    return cleanLeadingZeros(utils, valueStr, section.maxLength);\n  }\n  return valueStr;\n};\nexport const adjustSectionValue = (utils, timezone, section, keyCode, sectionsValueBoundaries, activeDate, stepsAttributes) => {\n  const delta = getDeltaFromKeyCode(keyCode);\n  const isStart = keyCode === 'Home';\n  const isEnd = keyCode === 'End';\n  const shouldSetAbsolute = section.value === '' || isStart || isEnd;\n  const adjustDigitSection = () => {\n    const sectionBoundaries = sectionsValueBoundaries[section.type]({\n      currentDate: activeDate,\n      format: section.format,\n      contentType: section.contentType\n    });\n    const getCleanValue = value => cleanDigitSectionValue(utils, timezone, value, sectionBoundaries, section);\n    const step = section.type === 'minutes' && stepsAttributes != null && stepsAttributes.minutesStep ? stepsAttributes.minutesStep : 1;\n    const currentSectionValue = parseInt(section.value, 10);\n    let newSectionValueNumber = currentSectionValue + delta * step;\n    if (shouldSetAbsolute) {\n      if (section.type === 'year' && !isEnd && !isStart) {\n        return utils.formatByString(utils.dateWithTimezone(undefined, timezone), section.format);\n      }\n      if (delta > 0 || isStart) {\n        newSectionValueNumber = sectionBoundaries.minimum;\n      } else {\n        newSectionValueNumber = sectionBoundaries.maximum;\n      }\n    }\n    if (newSectionValueNumber % step !== 0) {\n      if (delta < 0 || isStart) {\n        newSectionValueNumber += step - (step + newSectionValueNumber) % step; // for JS -3 % 5 = -3 (should be 2)\n      }\n\n      if (delta > 0 || isEnd) {\n        newSectionValueNumber -= newSectionValueNumber % step;\n      }\n    }\n    if (newSectionValueNumber > sectionBoundaries.maximum) {\n      return getCleanValue(sectionBoundaries.minimum + (newSectionValueNumber - sectionBoundaries.maximum - 1) % (sectionBoundaries.maximum - sectionBoundaries.minimum + 1));\n    }\n    if (newSectionValueNumber < sectionBoundaries.minimum) {\n      return getCleanValue(sectionBoundaries.maximum - (sectionBoundaries.minimum - newSectionValueNumber - 1) % (sectionBoundaries.maximum - sectionBoundaries.minimum + 1));\n    }\n    return getCleanValue(newSectionValueNumber);\n  };\n  const adjustLetterSection = () => {\n    const options = getLetterEditingOptions(utils, timezone, section.type, section.format);\n    if (options.length === 0) {\n      return section.value;\n    }\n    if (shouldSetAbsolute) {\n      if (delta > 0 || isStart) {\n        return options[0];\n      }\n      return options[options.length - 1];\n    }\n    const currentOptionIndex = options.indexOf(section.value);\n    const newOptionIndex = (currentOptionIndex + options.length + delta) % options.length;\n    return options[newOptionIndex];\n  };\n  if (section.contentType === 'digit' || section.contentType === 'digit-with-letter') {\n    return adjustDigitSection();\n  }\n  return adjustLetterSection();\n};\nexport const getSectionVisibleValue = (section, target) => {\n  let value = section.value || section.placeholder;\n  const hasLeadingZeros = target === 'non-input' ? section.hasLeadingZerosInFormat : section.hasLeadingZerosInInput;\n  if (target === 'non-input' && section.hasLeadingZerosInInput && !section.hasLeadingZerosInFormat) {\n    value = Number(value).toString();\n  }\n\n  // In the input, we add an empty character at the end of each section without leading zeros.\n  // This makes sure that `onChange` will always be fired.\n  // Otherwise, when your input value equals `1/dd/yyyy` (format `M/DD/YYYY` on DayJs),\n  // If you press `1`, on the first section, the new value is also `1/dd/yyyy`,\n  // So the browser will not fire the input `onChange`.\n  const shouldAddInvisibleSpace = ['input-rtl', 'input-ltr'].includes(target) && section.contentType === 'digit' && !hasLeadingZeros && value.length === 1;\n  if (shouldAddInvisibleSpace) {\n    value = `${value}\\u200e`;\n  }\n  if (target === 'input-rtl') {\n    value = `\\u2068${value}\\u2069`;\n  }\n  return value;\n};\nexport const cleanString = dirtyString => dirtyString.replace(/[\\u2066\\u2067\\u2068\\u2069]/g, '');\nexport const addPositionPropertiesToSections = (sections, isRTL) => {\n  let position = 0;\n  let positionInInput = isRTL ? 1 : 0;\n  const newSections = [];\n  for (let i = 0; i < sections.length; i += 1) {\n    const section = sections[i];\n    const renderedValue = getSectionVisibleValue(section, isRTL ? 'input-rtl' : 'input-ltr');\n    const sectionStr = `${section.startSeparator}${renderedValue}${section.endSeparator}`;\n    const sectionLength = cleanString(sectionStr).length;\n    const sectionLengthInInput = sectionStr.length;\n\n    // The ...InInput values consider the unicode characters but do include them in their indexes\n    const cleanedValue = cleanString(renderedValue);\n    const startInInput = positionInInput + renderedValue.indexOf(cleanedValue[0]) + section.startSeparator.length;\n    const endInInput = startInInput + cleanedValue.length;\n    newSections.push(_extends({}, section, {\n      start: position,\n      end: position + sectionLength,\n      startInInput,\n      endInInput\n    }));\n    position += sectionLength;\n    // Move position to the end of string associated to the current section\n    positionInInput += sectionLengthInInput;\n  }\n  return newSections;\n};\nconst getSectionPlaceholder = (utils, timezone, localeText, sectionConfig, currentTokenValue) => {\n  switch (sectionConfig.type) {\n    case 'year':\n      {\n        return localeText.fieldYearPlaceholder({\n          digitAmount: utils.formatByString(utils.dateWithTimezone(undefined, timezone), currentTokenValue).length\n        });\n      }\n    case 'month':\n      {\n        return localeText.fieldMonthPlaceholder({\n          contentType: sectionConfig.contentType\n        });\n      }\n    case 'day':\n      {\n        return localeText.fieldDayPlaceholder();\n      }\n    case 'weekDay':\n      {\n        return localeText.fieldWeekDayPlaceholder({\n          contentType: sectionConfig.contentType\n        });\n      }\n    case 'hours':\n      {\n        return localeText.fieldHoursPlaceholder();\n      }\n    case 'minutes':\n      {\n        return localeText.fieldMinutesPlaceholder();\n      }\n    case 'seconds':\n      {\n        return localeText.fieldSecondsPlaceholder();\n      }\n    case 'meridiem':\n      {\n        return localeText.fieldMeridiemPlaceholder();\n      }\n    default:\n      {\n        return currentTokenValue;\n      }\n  }\n};\nexport const changeSectionValueFormat = (utils, valueStr, currentFormat, newFormat) => {\n  if (process.env.NODE_ENV !== 'production') {\n    if (getDateSectionConfigFromFormatToken(utils, currentFormat).type === 'weekDay') {\n      throw new Error(\"changeSectionValueFormat doesn't support week day formats\");\n    }\n  }\n  return utils.formatByString(utils.parse(valueStr, currentFormat), newFormat);\n};\nconst isFourDigitYearFormat = (utils, timezone, format) => utils.formatByString(utils.dateWithTimezone(undefined, timezone), format).length === 4;\nexport const doesSectionFormatHaveLeadingZeros = (utils, timezone, contentType, sectionType, format) => {\n  if (contentType !== 'digit') {\n    return false;\n  }\n  const now = utils.dateWithTimezone(undefined, timezone);\n  switch (sectionType) {\n    // We can't use `changeSectionValueFormat`, because  `utils.parse('1', 'YYYY')` returns `1971` instead of `1`.\n    case 'year':\n      {\n        if (isFourDigitYearFormat(utils, timezone, format)) {\n          const formatted0001 = utils.formatByString(utils.setYear(now, 1), format);\n          return formatted0001 === '0001';\n        }\n        const formatted2001 = utils.formatByString(utils.setYear(now, 2001), format);\n        return formatted2001 === '01';\n      }\n    case 'month':\n      {\n        return utils.formatByString(utils.startOfYear(now), format).length > 1;\n      }\n    case 'day':\n      {\n        return utils.formatByString(utils.startOfMonth(now), format).length > 1;\n      }\n    case 'weekDay':\n      {\n        return utils.formatByString(utils.startOfWeek(now), format).length > 1;\n      }\n    case 'hours':\n      {\n        return utils.formatByString(utils.setHours(now, 1), format).length > 1;\n      }\n    case 'minutes':\n      {\n        return utils.formatByString(utils.setMinutes(now, 1), format).length > 1;\n      }\n    case 'seconds':\n      {\n        return utils.formatByString(utils.setMinutes(now, 1), format).length > 1;\n      }\n    default:\n      {\n        throw new Error('Invalid section type');\n      }\n  }\n};\nconst getEscapedPartsFromFormat = (utils, format) => {\n  const escapedParts = [];\n  const {\n    start: startChar,\n    end: endChar\n  } = utils.escapedCharacters;\n  const regExp = new RegExp(`(\\\\${startChar}[^\\\\${endChar}]*\\\\${endChar})+`, 'g');\n  let match = null;\n  // eslint-disable-next-line no-cond-assign\n  while (match = regExp.exec(format)) {\n    escapedParts.push({\n      start: match.index,\n      end: regExp.lastIndex - 1\n    });\n  }\n  return escapedParts;\n};\nexport const splitFormatIntoSections = (utils, timezone, localeText, format, date, formatDensity, shouldRespectLeadingZeros, isRTL) => {\n  let startSeparator = '';\n  const sections = [];\n  const now = utils.date();\n  const commitToken = token => {\n    if (token === '') {\n      return null;\n    }\n    const sectionConfig = getDateSectionConfigFromFormatToken(utils, token);\n    const hasLeadingZerosInFormat = doesSectionFormatHaveLeadingZeros(utils, timezone, sectionConfig.contentType, sectionConfig.type, token);\n    const hasLeadingZerosInInput = shouldRespectLeadingZeros ? hasLeadingZerosInFormat : sectionConfig.contentType === 'digit';\n    const isValidDate = date != null && utils.isValid(date);\n    let sectionValue = isValidDate ? utils.formatByString(date, token) : '';\n    let maxLength = null;\n    if (hasLeadingZerosInInput) {\n      if (hasLeadingZerosInFormat) {\n        maxLength = sectionValue === '' ? utils.formatByString(now, token).length : sectionValue.length;\n      } else {\n        if (sectionConfig.maxLength == null) {\n          throw new Error(`MUI: The token ${token} should have a 'maxDigitNumber' property on it's adapter`);\n        }\n        maxLength = sectionConfig.maxLength;\n        if (isValidDate) {\n          sectionValue = cleanLeadingZeros(utils, sectionValue, maxLength);\n        }\n      }\n    }\n    sections.push(_extends({}, sectionConfig, {\n      format: token,\n      maxLength,\n      value: sectionValue,\n      placeholder: getSectionPlaceholder(utils, timezone, localeText, sectionConfig, token),\n      hasLeadingZeros: hasLeadingZerosInFormat,\n      hasLeadingZerosInFormat,\n      hasLeadingZerosInInput,\n      startSeparator: sections.length === 0 ? startSeparator : '',\n      endSeparator: '',\n      modified: false\n    }));\n    return null;\n  };\n\n  // Expand the provided format\n  let formatExpansionOverflow = 10;\n  let prevFormat = format;\n  let nextFormat = utils.expandFormat(format);\n  while (nextFormat !== prevFormat) {\n    prevFormat = nextFormat;\n    nextFormat = utils.expandFormat(prevFormat);\n    formatExpansionOverflow -= 1;\n    if (formatExpansionOverflow < 0) {\n      throw new Error('MUI: The format expansion seems to be  enter in an infinite loop. Please open an issue with the format passed to the picker component');\n    }\n  }\n  const expandedFormat = nextFormat;\n\n  // Get start/end indexes of escaped sections\n  const escapedParts = getEscapedPartsFromFormat(utils, expandedFormat);\n\n  // This RegExp test if the beginning of a string correspond to a supported token\n  const isTokenStartRegExp = new RegExp(`^(${Object.keys(utils.formatTokenMap).join('|')})`);\n  let currentTokenValue = '';\n  for (let i = 0; i < expandedFormat.length; i += 1) {\n    const escapedPartOfCurrentChar = escapedParts.find(escapeIndex => escapeIndex.start <= i && escapeIndex.end >= i);\n    const char = expandedFormat[i];\n    const isEscapedChar = escapedPartOfCurrentChar != null;\n    const potentialToken = `${currentTokenValue}${expandedFormat.slice(i)}`;\n    if (!isEscapedChar && char.match(/([A-Za-z]+)/) && isTokenStartRegExp.test(potentialToken)) {\n      currentTokenValue += char;\n    } else {\n      // If we are on the opening or closing character of an escaped part of the format,\n      // Then we ignore this character.\n      const isEscapeBoundary = isEscapedChar && (escapedPartOfCurrentChar == null ? void 0 : escapedPartOfCurrentChar.start) === i || (escapedPartOfCurrentChar == null ? void 0 : escapedPartOfCurrentChar.end) === i;\n      if (!isEscapeBoundary) {\n        commitToken(currentTokenValue);\n        currentTokenValue = '';\n        if (sections.length === 0) {\n          startSeparator += char;\n        } else {\n          sections[sections.length - 1].endSeparator += char;\n        }\n      }\n    }\n  }\n  commitToken(currentTokenValue);\n  return sections.map(section => {\n    const cleanSeparator = separator => {\n      let cleanedSeparator = separator;\n      if (isRTL && cleanedSeparator !== null && cleanedSeparator.includes(' ')) {\n        cleanedSeparator = `\\u2069${cleanedSeparator}\\u2066`;\n      }\n      if (formatDensity === 'spacious' && ['/', '.', '-'].includes(cleanedSeparator)) {\n        cleanedSeparator = ` ${cleanedSeparator} `;\n      }\n      return cleanedSeparator;\n    };\n    section.startSeparator = cleanSeparator(section.startSeparator);\n    section.endSeparator = cleanSeparator(section.endSeparator);\n    return section;\n  });\n};\n\n/**\n * Some date libraries like `dayjs` don't support parsing from date with escaped characters.\n * To make sure that the parsing works, we are building a format and a date without any separator.\n */\nexport const getDateFromDateSections = (utils, sections) => {\n  // If we have both a day and a weekDay section,\n  // Then we skip the weekDay in the parsing because libraries like dayjs can't parse complicated formats containing a weekDay.\n  // dayjs(dayjs().format('dddd MMMM D YYYY'), 'dddd MMMM D YYYY')) // returns `Invalid Date` even if the format is valid.\n  const shouldSkipWeekDays = sections.some(section => section.type === 'day');\n  const sectionFormats = [];\n  const sectionValues = [];\n  for (let i = 0; i < sections.length; i += 1) {\n    const section = sections[i];\n    const shouldSkip = shouldSkipWeekDays && section.type === 'weekDay';\n    if (!shouldSkip) {\n      sectionFormats.push(section.format);\n      sectionValues.push(getSectionVisibleValue(section, 'non-input'));\n    }\n  }\n  const formatWithoutSeparator = sectionFormats.join(' ');\n  const dateWithoutSeparatorStr = sectionValues.join(' ');\n  return utils.parse(dateWithoutSeparatorStr, formatWithoutSeparator);\n};\nexport const createDateStrForInputFromSections = (sections, isRTL) => {\n  const formattedSections = sections.map(section => {\n    const dateValue = getSectionVisibleValue(section, isRTL ? 'input-rtl' : 'input-ltr');\n    return `${section.startSeparator}${dateValue}${section.endSeparator}`;\n  });\n  const dateStr = formattedSections.join('');\n  if (!isRTL) {\n    return dateStr;\n  }\n\n  // \\u2066: start left-to-right isolation\n  // \\u2067: start right-to-left isolation\n  // \\u2068: start first strong character isolation\n  // \\u2069: pop isolation\n  // wrap into an isolated group such that separators can split the string in smaller ones by adding \\u2069\\u2068\n  return `\\u2066${dateStr}\\u2069`;\n};\nexport const getSectionsBoundaries = (utils, timezone) => {\n  const today = utils.dateWithTimezone(undefined, timezone);\n  const endOfYear = utils.endOfYear(today);\n  const endOfDay = utils.endOfDay(today);\n  const {\n    maxDaysInMonth,\n    longestMonth\n  } = getMonthsInYear(utils, today).reduce((acc, month) => {\n    const daysInMonth = utils.getDaysInMonth(month);\n    if (daysInMonth > acc.maxDaysInMonth) {\n      return {\n        maxDaysInMonth: daysInMonth,\n        longestMonth: month\n      };\n    }\n    return acc;\n  }, {\n    maxDaysInMonth: 0,\n    longestMonth: null\n  });\n  return {\n    year: ({\n      format\n    }) => ({\n      minimum: 0,\n      maximum: isFourDigitYearFormat(utils, timezone, format) ? 9999 : 99\n    }),\n    month: () => ({\n      minimum: 1,\n      // Assumption: All years have the same amount of months\n      maximum: utils.getMonth(endOfYear) + 1\n    }),\n    day: ({\n      currentDate\n    }) => ({\n      minimum: 1,\n      maximum: currentDate != null && utils.isValid(currentDate) ? utils.getDaysInMonth(currentDate) : maxDaysInMonth,\n      longestMonth: longestMonth\n    }),\n    weekDay: ({\n      format,\n      contentType\n    }) => {\n      if (contentType === 'digit') {\n        const daysInWeek = getDaysInWeekStr(utils, timezone, format).map(Number);\n        return {\n          minimum: Math.min(...daysInWeek),\n          maximum: Math.max(...daysInWeek)\n        };\n      }\n      return {\n        minimum: 1,\n        maximum: 7\n      };\n    },\n    hours: ({\n      format\n    }) => {\n      const lastHourInDay = utils.getHours(endOfDay);\n      const hasMeridiem = utils.formatByString(utils.endOfDay(today), format) !== lastHourInDay.toString();\n      if (hasMeridiem) {\n        return {\n          minimum: 1,\n          maximum: Number(utils.formatByString(utils.startOfDay(today), format))\n        };\n      }\n      return {\n        minimum: 0,\n        maximum: lastHourInDay\n      };\n    },\n    minutes: () => ({\n      minimum: 0,\n      // Assumption: All years have the same amount of minutes\n      maximum: utils.getMinutes(endOfDay)\n    }),\n    seconds: () => ({\n      minimum: 0,\n      // Assumption: All years have the same amount of seconds\n      maximum: utils.getSeconds(endOfDay)\n    }),\n    meridiem: () => ({\n      minimum: 0,\n      maximum: 0\n    })\n  };\n};\nlet warnedOnceInvalidSection = false;\nexport const validateSections = (sections, valueType) => {\n  if (process.env.NODE_ENV !== 'production') {\n    if (!warnedOnceInvalidSection) {\n      const supportedSections = [];\n      if (['date', 'date-time'].includes(valueType)) {\n        supportedSections.push('weekDay', 'day', 'month', 'year');\n      }\n      if (['time', 'date-time'].includes(valueType)) {\n        supportedSections.push('hours', 'minutes', 'seconds', 'meridiem');\n      }\n      const invalidSection = sections.find(section => !supportedSections.includes(section.type));\n      if (invalidSection) {\n        console.warn(`MUI: The field component you are using is not compatible with the \"${invalidSection.type} date section.`, `The supported date sections are [\"${supportedSections.join('\", \"')}\"]\\`.`);\n        warnedOnceInvalidSection = true;\n      }\n    }\n  }\n};\nconst transferDateSectionValue = (utils, timezone, section, dateToTransferFrom, dateToTransferTo) => {\n  switch (section.type) {\n    case 'year':\n      {\n        return utils.setYear(dateToTransferTo, utils.getYear(dateToTransferFrom));\n      }\n    case 'month':\n      {\n        return utils.setMonth(dateToTransferTo, utils.getMonth(dateToTransferFrom));\n      }\n    case 'weekDay':\n      {\n        const formattedDaysInWeek = getDaysInWeekStr(utils, timezone, section.format);\n        const dayInWeekStrOfActiveDate = utils.formatByString(dateToTransferFrom, section.format);\n        const dayInWeekOfActiveDate = formattedDaysInWeek.indexOf(dayInWeekStrOfActiveDate);\n        const dayInWeekOfNewSectionValue = formattedDaysInWeek.indexOf(section.value);\n        const diff = dayInWeekOfNewSectionValue - dayInWeekOfActiveDate;\n        return utils.addDays(dateToTransferFrom, diff);\n      }\n    case 'day':\n      {\n        return utils.setDate(dateToTransferTo, utils.getDate(dateToTransferFrom));\n      }\n    case 'meridiem':\n      {\n        const isAM = utils.getHours(dateToTransferFrom) < 12;\n        const mergedDateHours = utils.getHours(dateToTransferTo);\n        if (isAM && mergedDateHours >= 12) {\n          return utils.addHours(dateToTransferTo, -12);\n        }\n        if (!isAM && mergedDateHours < 12) {\n          return utils.addHours(dateToTransferTo, 12);\n        }\n        return dateToTransferTo;\n      }\n    case 'hours':\n      {\n        return utils.setHours(dateToTransferTo, utils.getHours(dateToTransferFrom));\n      }\n    case 'minutes':\n      {\n        return utils.setMinutes(dateToTransferTo, utils.getMinutes(dateToTransferFrom));\n      }\n    case 'seconds':\n      {\n        return utils.setSeconds(dateToTransferTo, utils.getSeconds(dateToTransferFrom));\n      }\n    default:\n      {\n        return dateToTransferTo;\n      }\n  }\n};\nconst reliableSectionModificationOrder = {\n  year: 1,\n  month: 2,\n  day: 3,\n  weekDay: 4,\n  hours: 5,\n  minutes: 6,\n  seconds: 7,\n  meridiem: 8\n};\nexport const mergeDateIntoReferenceDate = (utils, timezone, dateToTransferFrom, sections, referenceDate, shouldLimitToEditedSections) =>\n// cloning sections before sort to avoid mutating it\n[...sections].sort((a, b) => reliableSectionModificationOrder[a.type] - reliableSectionModificationOrder[b.type]).reduce((mergedDate, section) => {\n  if (!shouldLimitToEditedSections || section.modified) {\n    return transferDateSectionValue(utils, timezone, section, dateToTransferFrom, mergedDate);\n  }\n  return mergedDate;\n}, referenceDate);\nexport const isAndroid = () => navigator.userAgent.toLowerCase().indexOf('android') > -1;\nexport const getSectionOrder = (sections, isRTL) => {\n  const neighbors = {};\n  if (!isRTL) {\n    sections.forEach((_, index) => {\n      const leftIndex = index === 0 ? null : index - 1;\n      const rightIndex = index === sections.length - 1 ? null : index + 1;\n      neighbors[index] = {\n        leftIndex,\n        rightIndex\n      };\n    });\n    return {\n      neighbors,\n      startIndex: 0,\n      endIndex: sections.length - 1\n    };\n  }\n  const rtl2ltr = {};\n  const ltr2rtl = {};\n  let groupedSectionsStart = 0;\n  let groupedSectionsEnd = 0;\n  let RTLIndex = sections.length - 1;\n  while (RTLIndex >= 0) {\n    groupedSectionsEnd = sections.findIndex(\n    // eslint-disable-next-line @typescript-eslint/no-loop-func\n    (section, index) => {\n      var _section$endSeparator;\n      return index >= groupedSectionsStart && ((_section$endSeparator = section.endSeparator) == null ? void 0 : _section$endSeparator.includes(' ')) &&\n      // Special case where the spaces were not there in the initial input\n      section.endSeparator !== ' / ';\n    });\n    if (groupedSectionsEnd === -1) {\n      groupedSectionsEnd = sections.length - 1;\n    }\n    for (let i = groupedSectionsEnd; i >= groupedSectionsStart; i -= 1) {\n      ltr2rtl[i] = RTLIndex;\n      rtl2ltr[RTLIndex] = i;\n      RTLIndex -= 1;\n    }\n    groupedSectionsStart = groupedSectionsEnd + 1;\n  }\n  sections.forEach((_, index) => {\n    const rtlIndex = ltr2rtl[index];\n    const leftIndex = rtlIndex === 0 ? null : rtl2ltr[rtlIndex - 1];\n    const rightIndex = rtlIndex === sections.length - 1 ? null : rtl2ltr[rtlIndex + 1];\n    neighbors[index] = {\n      leftIndex,\n      rightIndex\n    };\n  });\n  return {\n    neighbors,\n    startIndex: rtl2ltr[0],\n    endIndex: rtl2ltr[sections.length - 1]\n  };\n};"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}